KEEP IN MIND :
std::cout << std::endl  << "useless :" << std::endl;
const Animal* const useless = new Cat();
const Animal* : je ne peux pas modifier le contenu pointe
Animal* const : le ptr lui meme est constant et doit etre initialise directement
const Animal* const : le contenu et le pointeur sont constants
Je peux donc declarer k et lui attribuer une valeur plus tard (qui sera alors figee)




A faire pour chaque projet :

- Header
- -Wall -Wextra -Werror -std=c++98
- Ecrire les noms de fichiers au format UpperCamelCase.cpp/hpp (".class.cpp/hpp)
- Utiliser les listes d'initialisation quand c'est possible
- La norminette (sauf les 25 lignes)
- Forme canonique a partir du CPP02 sauf contre indication
- toujours mettre "this" parce que c'est plus propre
- les variables private sont precedes d'un _

Video 42 :


                                    CPP00

- definir par ft() const; fonction MEMBRE constante qui NE MODIFIE PAS l'instance courante. Les getter sont des ft() const;.

- const ptr* : le contenu pointe ne peut pas etre modifie via ce ptr (le pointeur peut pointer vers autre chose) / ptr* const : le pointeur doit etre declare et initialise (à NULL par ex), valeur modifiable mais pointeur non modifiable (le pointeur pointera uniquement vers cette adresse)       / const ptr* const : ni le contenu ni le pointeur ne pourront etre change

- ft(MaClasse obj) : j'envoie une copie donc le constructeur de copie est appelé.
A la fin de l'exec, le destructeur par défaut est appelé uniquement par cette copie
- ft(MaClasse* ptr) : je modifie l'objet original donc pas de con/destructeur appelés
- ft(MaClasse& ref) : idem

- Si j'ai pas de copy constructor dans mon code alors le compilateur en génère un qui n'est adapté qu'aux attributs facilement copiable (std//string, int etc ...)

-Fonction membre : prototype définit à l'intérieur d'une classe, elle peut modifier (this)/observer les attributs de cette classe.
-Fonction non-membre : définie en dehors d'une classe, elle peut techniquement observer les attributs PUBLIQUES d'une instance si on les rentre en paramètres. Elle prend juste des paramètres et s'exécute, comme en C.
class Rectangle {
public:
    int largeur, hauteur;
    Rectangle(int l, int h) : largeur(l), hauteur(h) {}
};
// Fonction non-membre pour calculer l’aire
int aire(const Rectangle& r) {
    return r.largeur * r.hauteur;
}
int main() {
    Rectangle rect(5, 3);
    std::cout << aire(rect) << std::endl;  // Affiche 15
}

-Attribut membre : propre à une instance / const Attribut : comme en C, doit etre definit dans l'initialization list.
-Attribut non-membre : indépendant, non influencé par les constructeurs/des.

- Une fonction membre peut accéder aux attributs de classe (static), mais si je veux que cette fonction ne serve qu'à ça alors je définis une fonction MEMBRE static :
class Compteur {
    public:
        static int nbInstances;  // attribut de classe partagé entre toutes les instances
        Compteur() {
            nbInstances++;
        }
        static int getNbInstances() {  // ✅ fonction membre statique
            return nbInstances;
        }
};
// Initialisation de l'attribut statique
int Compteur::nbInstances = 0;
//Par définition une fct static ne peut pas accéder à this

    EXEMPLE POUR RECUPERER L'ADRESSE D'UN ATTRIBUT/D'UNE FONCTION DANS UNE INSTANCE
                                    En 3 ETAPES

J'ai une instance de type Sample, et je veux récupérer l'adresse d'un attribut int foo, et d'une fonction membre nommée bar.

ETAPE 1:
Sample  instance;//constructeur par défaut s'enclenche
Sample* instancep; //un pointeur qui peut contenir l'adresse d'une instance Sample
instancep = &instance;
ETAPE 2:
int Sample::*ptr_foo = NULL; //un pointeur qui récupère un int contenu dans une instance Sample (nullptr fait forcément réf à un pointeur NULL, alors que NULL peut faire réf à 0)
Pas obligé d'initialiser à nullptr mais bonne pratique.
ETAPE 3:
ptr_foo = &Sample::foo;//prêt à récupérer l'adresse du membre foo d'une instance
int hello = instance.*ptr_foo;
int hello = instancep->*ptr_foo;


POUR UNE FONCTION :
void (Sample::*ptr_bar)();//une fonction de type void, sans args
ptr_bar = &Sample::bar;
(instance.*ptr_bar)();
(instancep->*ptr_bar)();



                                            CPP01


-STACK : on ne retourne jamais la référence/pointeur d'une variable créé localement dans une fonction, on utilise la heap.
SAUF SI ON EST DANS LE MAIN alors on peut tout faire en local et travailler avec les références/pointeurs dans les fonctions.
- REFERENCE : s'initialise dès sa délcaration int a = 5; int& ref = a;




                                            CPP02
[.hpp]
class	Fixed
{
	public:
		Fixed(void);//Constructeur par defaut
		Fixed(const Fixed &copy);//Fixed b(a);
		Fixed	&operator=(const Fixed &rhs);
		~Fixed(void);//Destructeur par defaut
};

[.cpp]
Fixed::Fixed(void) : _n(0), _bits(8)
{
	std::cout << "Fixed default constructor called" << std::endl;
}

Fixed::Fixed(const Fixed &copy) : _n(copy._n), _bits(copy._bits)
{
	std::cout << "Fixed copy constructor called" << std::endl;
}

Fixed	&Fixed::operator=(const Fixed &rhs)
{
	//Si this different de l'adresse de la référence
	if (this != &rhs)
	{
        ...
	}
	else
		std::cout << "Assignment operator called, but useless" << std::endl;
	return (*this);
}

NB : Si dans main je fais Fixed a = b; ca appel le constructeur de copie (Fixed a(b))
mais si je fais Fixed a; a = b; alors ca appel l'opérateur =.

                                            CPP03
Quand on crée ScavTrap ca fait d'abord appel au constructeur parent
[.hpp]
class ScavTrap : public ClapTrap
{ ... }

[.cpp]
ScavTrap::ScavTrap(void) : ClapTrap() {}
ScavTrap::ScavTrap(std::string	name) : ClapTrap(name) {}
ScavTrap::ScavTrap(const ScavTrap &copy) : ClapTrap(copy) {}

                                            CPP04
- Polymorphisme : je dois utiliser new (heap). new appel le constructeur, delete le destructeur
- A l'héritage le constructeur parent se lance avant le constructeur enfant

- Un attribut protected n'est utilisable que par la classe en question et ses enfants, pas le main()
- Si je fais class Cat : public Animal alors j'hérite des public et protected (pas private)
Dans ces 2 cas là le main() n'a pas accès aux attributs hérités de Animal depuis Cat :
- Si je fais class Cat : protected Animal alors les attributs public et protected deviennent protected
- Si je fais class Cat : private Animal tout devient private, les héritants de Cat ne pourront pas y accéder

Je peux déclarer Cat, Kitten ou Dog en pointeur Animal* et avoir accès au bon
makeSound. Un bonne pratique est de réécrire virtual pour les héritants meme si c'est
pas obligatoire.
virtual ~Animal(void);//LE DESTRUCTEUR DOIT AUSSI ETRE virtual
virtual void makeSound(void) const;


Interface qui oblige toutes les classes enfants à avoir ces fonctions dans leurs attributs. Une interface ne peut pas avoir d'attributs 
Class ICoffeMaker
{
   void  Sayhello(std::string hi) = 0;
   int Sometri(int tri) = 0;
}

Une classe abstraite c'est comme une interface mais lorsque certainq attributs/fonctions sont concrets (pas =0 et on les a implémenté dans un .cpp)


COMMENT COMPILER CODE SIMPLEMENT POUR LE TESTER EN EXAM ? COMME CA ?

c++ -Wall -Wextra -Werror -I. -std=c++98 ... animal


